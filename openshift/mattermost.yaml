# Based on https://raw.githubusercontent.com/goern/mattermost-openshift/centos7/mattermost.yaml
apiVersion: v1
kind: Template
metadata:
  name: mattermost
objects:

- kind: Secret
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
  stringData:
    database-user: "${MM_USERNAME}"
    database-password: "${MM_PASSWORD}"
    mm-at-rest-encrypt-key: "${MM_AT_REST_ENCRYPT_KEY}"
    mm-public-link-salt: "${MM_PUBLIC_LINK_SALT}"
    mm-reset-salt: "${MM_RESET_SALT}"
    mm-invite-salt: "${MM_INVITE_SALT}"

- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}

- kind: ImageStream
  apiVersion: v1
  metadata:
    name: centos
  spec:
    dockerImageRepository: docker.io/centos

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      git:
        uri: https://github.com/BonnierNews/mattershift
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: centos:latest
      type: Docker
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
    annotations:
      description: Defines how to deploy Mattermost
  spec:
    selector:
      name: ${APPLICATION_NAME}
    replicas: 1
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
    - type: ConfigChange
    - type: GitHub
      github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
    template:
      metadata:
        name: ${APPLICATION_NAME}
        labels:
          name: ${APPLICATION_NAME}
      spec:
        volumes:
        - name: "${APPLICATION_NAME}-data"
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}-data"
        containers:
        - image: ${APPLICATION_NAME}
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8065
          volumeMounts:
          - name: "${APPLICATION_NAME}-data"
            mountPath: "/opt/mattermost/storage"
          env:
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: MM_DBNAME
            value: ${MM_DBNAME}
          - name: MM_USERNAME
            valueFrom:
              secretKeyRef:
                  name: ${APPLICATION_NAME}
                  key: database-user
          - name: MM_PASSWORD
            valueFrom:
              secretKeyRef:
                  name: ${APPLICATION_NAME}
                  key: database-password
          - name: MM_AT_REST_ENCRYPT_KEY
            valueFrom:
              secretKeyRef:
                name: ${APPLICATION_NAME}
                key: mm-at-rest-encrypt-key
          - name: MM_PUBLIC_LINK_SALT
            valueFrom:
              secretKeyRef:
                name: ${APPLICATION_NAME}
                key: mm-public-link-salt
          - name: MM_RESET_SALT
            valueFrom:
              secretKeyRef:
                name: ${APPLICATION_NAME}
                key: mm-reset-salt
          - name: MM_INVITE_SALT
            valueFrom:
              secretKeyRef:
                name: ${APPLICATION_NAME}
                key: mm-invite-salt

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: Defines how to deploy the database
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          namespace: "${NAMESPACE}"
          name: mysql:5.7
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    template:
      metadata:
        name: "${DATABASE_SERVICE_NAME}"
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}"
        containers:
        - name: mysql
          image: " "
          ports:
          - containerPort: 3306
          volumeMounts:
          - name: "${DATABASE_SERVICE_NAME}-data"
            mountPath: "/var/lib/mysql/data"
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - MYSQL_PWD='${MM_PASSWORD}' mysql -h 127.0.0.1 -u ${MM_USERNAME} -D ${MM_DBNAME} -e 'SELECT 1'
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
          env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: "${APPLICATION_NAME}"
                key: database-user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${APPLICATION_NAME}"
                key: database-password
          - name: MYSQL_DATABASE
            value: "${MM_DBNAME}"
          resources:
            limits:
              memory: "${MEMORY_MYSQL_LIMIT}"

- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-data"
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: "${MM_VOLUME_CAPACITY}"

- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DATABASE_VOLUME_CAPACITY}

- kind: Service
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
  spec:
    ports:
    - name: 8065-tcp
      port: 8065
      protocol: TCP
      targetPort: 8065
    selector:
      deploymentconfig: ${APPLICATION_NAME}

- kind: Service
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: Exposes the database server
  spec:
    ports:
    - name: mysql
      port: 3306
      targetPort: 3306
    selector:
      name: "${DATABASE_SERVICE_NAME}"

- kind: Route
  apiVersion: v1
  metadata:
    name: "mattermost-frontend"
    labels:
      app: "mattermost"
  spec:
    host: "${APPLICATION_HOSTNAME}"
    to:
      kind: "Service"
      name: "${APPLICATION_NAME}"
    tls:
      termination: edge

parameters:
- name: APPLICATION_HOSTNAME
  displayName: Name
  description: The hostnname assigned to the created route
  value: ""
- name: APPLICATION_NAME
  displayName: Name
  description: The name assigned to Mattermost objects in this template
  required: true
  value: mattermost
- name: DATABASE_SERVICE_NAME
  description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  required: true
  value: mysql
- name: NAMESPACE
  displayName: Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  required: true
  value: openshift
- name: MM_USERNAME
  description: Username for MySQL user that will be used for accessing the database.
  displayName: Database User
  generate: expression
  from: mattermost[A-Z0-9]{4}
  required: true
- name: MM_PASSWORD
  description: Password for the MySQL user.
  displayName: Database Password
  generate: expression
  from: "[a-zA-Z0-9]{16}"
- name: MM_DBNAME
  description: Name of the MySQL database accessed.
  displayName: MySQL Database Name
  required: true
  value: mattermost
- name: MM_VOLUME_CAPACITY
  description: Volume space available for Mattermost data, e.g. 512Mi, 2Gi.
  displayName: Mattermost file Volume Capacity
  required: true
  value: 10Gi
- name: DATABASE_VOLUME_CAPACITY
  description: Volume space available for Database data, e.g. 512Mi, 2Gi.
  displayName: Database volume Capacity
  required: true
  value: 10Gi
- name: MEMORY_MYSQL_LIMIT
  displayName: Memory Limit (MySQL)
  description: Maximum amount of memory the MySQL container can use.
  required: true
  value: 4Gi
- name: MM_AT_REST_ENCRYPT_KEY
  displayName: Encryption key
  description: Mattermost at rest encryption key
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: MM_PUBLIC_LINK_SALT
  displayName: Salt (links)
  description: Salt for Mattermost links
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: MM_RESET_SALT
  displayName: Salt (resets)
  description: Salt for password reset
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: MM_INVITE_SALT
  displayName: Salt (invites)
  description: Salt for invites
  generate: expression
  from: "[a-zA-Z0-9]{40}"